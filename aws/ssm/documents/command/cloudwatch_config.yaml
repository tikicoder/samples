---
schemaVersion: "2.2"
description: Configure Cloudwatch Agent Config
parameters:
  resetConfig:
    type: "String"
    description: "If true this will delete all other configs. If not true (case sensitive), than it is false"
    default: "false"
  configName:
    type: "String"
    description: "The name of the config to use."
    default: "secondary"
  LinuxCloudWatchConfigBase64:
    type: "String"
    description: "Linux CloudWatch Config converted to base64"
    default: "eyJhZ2VudCI6eyJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJvbWl0X2hvc3RuYW1lIjpmYWxzZSwiYXdzX3Nka19sb2dfbGV2ZWwiOiJMb2dEZWJ1ZyIsImxvZ2ZpbGUiOiIvb3B0L2F3cy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC9sb2dzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50LmxvZyIsInJ1bl9hc191c2VyIjoicm9vdCJ9LCJtZXRyaWNzIjp7Im5hbWVzcGFjZSI6IkNXRGV0YWlsZWRNZXRyaWNzIiwiYXBwZW5kX2RpbWVuc2lvbnMiOnsiQXV0b1NjYWxpbmdHcm91cE5hbWUiOiIke2F3czpBdXRvU2NhbGluZ0dyb3VwTmFtZX0iLCJJbWFnZUlkIjoiJHthd3M6SW1hZ2VJZH0iLCJJbnN0YW5jZUlkIjoiJHthd3M6SW5zdGFuY2VJZH0iLCJJbnN0YW5jZVR5cGUiOiIke2F3czpJbnN0YW5jZVR5cGV9IiwiSW5zdGFuY2VPcyI6IkxpbnV4In0sImFnZ3JlZ2F0aW9uX2RpbWVuc2lvbnMiOltbIkluc3RhbmNlSWQiXSxbIkluc3RhbmNlVHlwZSJdLFsiSW5zdGFuY2VPcyJdLFsiQXV0b1NjYWxpbmdHcm91cE5hbWUiXSxbIkluc3RhbmNlSWQiLCJJbnN0YW5jZVR5cGUiXSxbIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlSWQiXSxbIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlT3MiLCJJbnN0YW5jZUlkIl0sWyJJbnN0YW5jZU9zIiwiSW5zdGFuY2VJZCJdLFsiSW5zdGFuY2VPcyIsIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlSWQiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIiwiSW1hZ2VJZCIsIkluc3RhbmNlSWQiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIiwiSW5zdGFuY2VPcyIsIkltYWdlSWQiLCJJbnN0YW5jZUlkIl0sWyJBdXRvU2NhbGluZ0dyb3VwTmFtZSIsIkluc3RhbmNlT3MiLCJJbWFnZUlkIiwiSW5zdGFuY2VUeXBlIiwiSW5zdGFuY2VJZCJdXSwiZm9yY2VfZmx1c2hfaW50ZXJ2YWwiOjkwLCJtZXRyaWNzX2NvbGxlY3RlZCI6eyJjcHUiOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlsiY3B1X3VzYWdlX2lkbGUiLCJjcHVfdXNhZ2VfaW93YWl0IiwiY3B1X3VzYWdlX3VzZXIiLCJjcHVfdXNhZ2Vfc3lzdGVtIl0sInRvdGFsY3B1Ijp0cnVlfSwiZGlzayI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6ImRpc2tfZnJlZSIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJkaXNrX3RvdGFsIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6ImRpc2tfdXNlZCIsInVuaXQiOiJHaWdhYnl0ZXMifSwiZGlza191c2VkX3BlcmNlbnQiLCJkaXNrX2lub2Rlc19mcmVlIiwiZGlza19pbm9kZXNfdG90YWwiXX0sImRpc2tpbyI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6WyJkaXNraW9faW9wc19pbl9wcm9ncmVzcyIsImRpc2tpb19pb190aW1lIiwiZGlza2lvX3dyaXRlX2J5dGVzIiwiZGlza2lvX3JlYWRfYnl0ZXMiLCJkaXNraW9fd3JpdGVzIiwiZGlza2lvX3JlYWRzIl19LCJzd2FwIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoic3dhcF91c2VkIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6InN3YXBfZnJlZSIsInVuaXQiOiJHaWdhYnl0ZXMifSwic3dhcF91c2VkX3BlcmNlbnQiXX0sIm1lbSI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6Im1lbV9hY3RpdmUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX2F2YWlsYWJsZSIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJtZW1fYnVmZmVyZWQiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX2NhY2hlZCIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJtZW1fZnJlZSIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJtZW1fdG90YWwiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX3VzZWQiLCJ1bml0IjoiR2lnYWJ5dGVzIn0sIm1lbV9hdmFpbGFibGVfcGVyY2VudCIsIm1lbV91c2VkX3BlcmNlbnQiXX0sIm5ldCI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6WyJuZXRfYnl0ZXNfc2VudCIsIm5ldF9ieXRlc19yZWN2IiwibmV0X2Ryb3BfaW4iLCJuZXRfZHJvcF9vdXQiLCJuZXRfZXJyX2luIiwibmV0X2Vycl9vdXQiLCJuZXRfcGFja2V0c19zZW50IiwibmV0X3BhY2tldHNfcmVjdiJdfSwibmV0c3RhdCI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6WyJuZXRzdGF0X3RjcF9lc3RhYmxpc2hlZCIsIm5ldHN0YXRfdGNwX3RpbWVfd2FpdCIsIm5ldHN0YXRfdGNwX3N5bl9zZW50IiwibmV0c3RhdF90Y3BfY2xvc2UiLCJuZXRzdGF0X3RjcF9jbG9zZV93YWl0IiwibmV0c3RhdF90Y3BfY2xvc2luZyJdfSwicHJvY2Vzc2VzIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbInByb2Nlc3Nlc19ydW5uaW5nIiwicHJvY2Vzc2VzX3NsZWVwaW5nIiwicHJvY2Vzc2VzX2RlYWQiLCJwcm9jZXNzZXNfaWRsZSIsInByb2Nlc3Nlc190b3RhbCIsInByb2Nlc3Nlc190b3RhbF90aHJlYWRzIiwicHJvY2Vzc2VzX3pvbWJpZXMiXX19fSwibG9ncyI6eyJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3MiLCJmb3JjZV9mbHVzaF9pbnRlcnZhbCI6OTAsImxvZ3NfY29sbGVjdGVkIjp7ImZpbGVzIjp7ImNvbGxlY3RfbGlzdCI6W3siZmlsZV9wYXRoIjoiL29wdC9hd3MvYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQvbG9ncy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5sb2ciLCJsb2dfZ3JvdXBfbmFtZSI6ImFtYXpvbi1jbG91ZHdhdGNoLWFnZW50LmxvZyIsImxvZ19zdHJlYW1fbmFtZSI6ImxvZy1DV0RldGFpbGVkTWV0cmljcy17aW5zdGFuY2VfaWR9LXtob3N0bmFtZX0tY3dhZ2VudCIsInRpbWV6b25lIjoiVVRDIiwidGltZXN0YW1wX2Zvcm1hdCI6IiVZLSVtLSVkVCVIOiVNOiVTLiVmJXoiLCJhdXRvX3JlbW92YWwiOnRydWUsInJldGVudGlvbl9pbl9kYXlzIjoxODB9LHsiZmlsZV9wYXRoIjoiL3Zhci9sb2cvc3lzdGVtLmxvZyoiLCJsb2dfZ3JvdXBfbmFtZSI6InN5c3RlbS5sb2ciLCJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3Mte2luc3RhbmNlX2lkfS17aG9zdG5hbWV9LXN5c3RlbSIsInRpbWV6b25lIjoiVVRDIiwidGltZXN0YW1wX2Zvcm1hdCI6IiVZLSVtLSVkVCVIOiVNOiVTLiVmJXoiLCJhdXRvX3JlbW92YWwiOnRydWUsInJldGVudGlvbl9pbl9kYXlzIjoxODB9XX19fX0="
  WinuxCloudWatchConfigBase64:
    type: "String"
    description: "Windows CloudWatch Config converted to base64"
    default: "eyJhZ2VudCI6eyJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJvbWl0X2hvc3RuYW1lIjpmYWxzZSwiYXdzX3Nka19sb2dfbGV2ZWwiOiJMb2dEZWJ1ZyIsImxvZ2ZpbGUiOiJjOlxcUHJvZ3JhbURhdGFcXEFtYXpvblxcQW1hem9uQ2xvdWRXYXRjaEFnZW50XFxMb2dzXFxhbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5sb2cifSwibWV0cmljcyI6eyJuYW1lc3BhY2UiOiJDV0RldGFpbGVkTWV0cmljcyIsImFwcGVuZF9kaW1lbnNpb25zIjp7IkF1dG9TY2FsaW5nR3JvdXBOYW1lIjoiJHthd3M6QXV0b1NjYWxpbmdHcm91cE5hbWV9IiwiSW1hZ2VJZCI6IiR7YXdzOkltYWdlSWR9IiwiSW5zdGFuY2VJZCI6IiR7YXdzOkluc3RhbmNlSWR9IiwiSW5zdGFuY2VUeXBlIjoiJHthd3M6SW5zdGFuY2VUeXBlfSIsIkluc3RhbmNlT3MiOiJXaW5kb3dzIn0sImFnZ3JlZ2F0aW9uX2RpbWVuc2lvbnMiOltbIkluc3RhbmNlSWQiXSxbIkluc3RhbmNlVHlwZSJdLFsiSW5zdGFuY2VPcyJdLFsiQXV0b1NjYWxpbmdHcm91cE5hbWUiXSxbIkluc3RhbmNlSWQiLCJJbnN0YW5jZVR5cGUiXSxbIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlSWQiXSxbIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlT3MiLCJJbnN0YW5jZUlkIl0sWyJJbnN0YW5jZU9zIiwiSW5zdGFuY2VJZCJdLFsiSW5zdGFuY2VPcyIsIkluc3RhbmNlVHlwZSIsIkluc3RhbmNlSWQiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIiwiSW1hZ2VJZCIsIkluc3RhbmNlSWQiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIiwiSW5zdGFuY2VPcyIsIkltYWdlSWQiLCJJbnN0YW5jZUlkIl0sWyJBdXRvU2NhbGluZ0dyb3VwTmFtZSIsIkluc3RhbmNlT3MiLCJJbWFnZUlkIiwiSW5zdGFuY2VUeXBlIiwiSW5zdGFuY2VJZCJdXSwiZm9yY2VfZmx1c2hfaW50ZXJ2YWwiOjkwLCJtZXRyaWNzX2NvbGxlY3RlZCI6eyJMb2dpY2FsRGlzayI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6IiUgRnJlZSBTcGFjZSIsInJlbmFtZSI6ImRpc2tfZnJlZV9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiIlIFVzZWQgU3BhY2UiLCJyZW5hbWUiOiJkaXNrX3VzZWRfcGVyY2VudCIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiRnJlZSBNZWdhYnl0ZXMiLCJyZW5hbWUiOiJkaXNrX2ZyZWUiLCJ1bml0IjoiTWVnYWJ5dGVzIn0seyJuYW1lIjoiJSBJZGxlIFRpbWUiLCJyZW5hbWUiOiJkaXNrX3VzYWdlX2lkbGUiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgRGlzayBSZWFkIFRpbWUiLCJyZW5hbWUiOiJkaXNrX3VzYWdlX3JlYWQiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgRGlzayBXcml0ZSBUaW1lIiwicmVuYW1lIjoiZGlza191c2FnZV93cml0ZSIsInVuaXQiOiJQZXJjZW50In1dfSwiTWVtb3J5Ijp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoiJSBBdmFpbGFibGUgU3dhcCBTcGFjZSIsInJlbmFtZSI6InN3YXBfZnJlZV9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiIlIFVzZWQgU3dhcCBTcGFjZSIsInJlbmFtZSI6InN3YXBfdXNlZF9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiJBdmFpbGFibGUgTUJ5dGVzIFN3YXAiLCJyZW5hbWUiOiJzd2FwX2ZyZWUiLCJ1bml0IjoiTWVnYWJ5dGVzIn0seyJuYW1lIjoiJSBBdmFpbGFibGUgTWVtb3J5IiwicmVuYW1lIjoibWVtX2F2YWlsYWJsZV9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiIlIFVzZWQgTWVtb3J5IiwicmVuYW1lIjoibWVtX3VzZWRfcGVyY2VudCIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiQXZhaWxhYmxlIE1CeXRlcyBNZW1vcnkiLCJyZW5hbWUiOiJtZW1fYXZhaWxhYmxlIiwidW5pdCI6Ik1lZ2FieXRlcyJ9LHsibmFtZSI6IlBhZ2VzL3NlYyIsInJlbmFtZSI6InBhZ2VzX3NlY29uZCJ9XX0sIk5ldHdvcmsgSW50ZXJmYWNlIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoiVG90YWwgQnl0ZXMgVHJhbnNtaXR0ZWQiLCJyZW5hbWUiOiJuZXRfYnl0ZXNfc2VudCIsInVuaXQiOiJCeXRlcyJ9LHsibmFtZSI6IlRvdGFsIEJ5dGVzIFJlY2VpdmVkIiwicmVuYW1lIjoibmV0X2J5dGVzX3JlY3YiLCJ1bml0IjoiQnl0ZXMifSx7Im5hbWUiOiJUb3RhbCBSeCBFcnJvcnMiLCJyZW5hbWUiOiJuZXRfZXJyX2luIn0seyJuYW1lIjoiVG90YWwgVHggRXJyb3JzIiwicmVuYW1lIjoibmV0X2Vycl9vdXQifSx7Im5hbWUiOiJUb3RhbCBQYWNrZXRzIFRyYW5zbWl0dGVkIiwicmVuYW1lIjoibmV0X3BhY2tldHNfc2VudCJ9LHsibmFtZSI6IlRvdGFsIFBhY2tldHMgUmVjZWl2ZWQiLCJyZW5hbWUiOiJuZXRfcGFja2V0c19yZWN2In1dfSwiUGFnaW5nIEZpbGUiOnsibWVhc3VyZW1lbnQiOlsiJSBVc2FnZSJdLCJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJyZXNvdXJjZXMiOlsiKiJdfSwiUGh5c2ljYWxEaXNrIjp7Im1lYXN1cmVtZW50IjpbIiUgRGlzayBUaW1lIiwiRGlzayBXcml0ZSBCeXRlcy9zZWMiLCJEaXNrIFJlYWQgQnl0ZXMvc2VjIiwiRGlzayBXcml0ZXMvc2VjIiwiRGlzayBSZWFkcy9zZWMiXSwibWV0cmljc19jb2xsZWN0aW9uX2ludGVydmFsIjo2MCwicmVzb3VyY2VzIjpbIioiXX0sIlByb2Nlc3NvciI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6IiUgSWRsZSBUaW1lIiwicmVuYW1lIjoiY3B1X3VzYWdlX2lkbGUiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgSW50ZXJydXB0IFRpbWUiLCJyZW5hbWUiOiJjcHVfdXNhZ2VfaWRsZSIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiJSBVc2VyIFRpbWUiLCJyZW5hbWUiOiJjcHVfdXNhZ2VfdXNlciIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiJSBQcm9jZXNzb3IgVGltZSIsInJlbmFtZSI6ImNwdV91c2FnZV9zeXN0ZW0iLCJ1bml0IjoiUGVyY2VudCJ9XX0sIlN5c3RlbSI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6IkZyZWUgUGh5c2ljYWwgTWVtb3J5IiwicmVuYW1lIjoibWVtX2F2YWlsYWJsZSIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJGcmVlIFZpcnR1YWwgTWVtb3J5IiwicmVuYW1lIjoidm1lbV9hdmFpbGFibGUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoiUHJvY2Vzc2VzIiwicmVuYW1lIjoic3lzdGVtX3Byb2Nlc3NlcyJ9LHsibmFtZSI6IlVwdGltZSIsInJlbmFtZSI6InN5c3RlbV91cHRpbWUifV19LCJUQ1B2NCI6eyJtZWFzdXJlbWVudCI6WyJDb25uZWN0aW9ucyBFc3RhYmxpc2hlZCJdLCJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjQ1fSwiVENQdjYiOnsibWVhc3VyZW1lbnQiOlsiQ29ubmVjdGlvbnMgRXN0YWJsaXNoZWQiXSwibWV0cmljc19jb2xsZWN0aW9uX2ludGVydmFsIjo0NX0sInN0YXRzZCI6eyJtZXRyaWNzX2FnZ3JlZ2F0aW9uX2ludGVydmFsIjo0NSwibWV0cmljc19jb2xsZWN0aW9uX2ludGVydmFsIjoxMCwic2VydmljZV9hZGRyZXNzIjoiOjgxMjUifX19LCJsb2dzIjp7ImxvZ19zdHJlYW1fbmFtZSI6ImxvZy1DV0RldGFpbGVkTWV0cmljcyIsImZvcmNlX2ZsdXNoX2ludGVydmFsIjo5MCwibG9nc19jb2xsZWN0ZWQiOnsiZmlsZXMiOnsiY29sbGVjdF9saXN0IjpbeyJmaWxlX3BhdGgiOiJjOlxcUHJvZ3JhbURhdGFcXEFtYXpvblxcQW1hem9uQ2xvdWRXYXRjaEFnZW50XFxMb2dzXFxhbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5sb2ciLCJsb2dfZ3JvdXBfbmFtZSI6ImFtYXpvbi1jbG91ZHdhdGNoLWFnZW50LmxvZyIsImxvZ19zdHJlYW1fbmFtZSI6ImxvZy1DV0RldGFpbGVkTWV0cmljcy17aW5zdGFuY2VfaWR9LXtob3N0bmFtZX0tY3dhZ2VudCIsInRpbWV6b25lIjoiVVRDIiwidGltZXN0YW1wX2Zvcm1hdCI6IiVZLSVtLSVkVCVIOiVNOiVTLiVmJXoiLCJhdXRvX3JlbW92YWwiOnRydWUsInJldGVudGlvbl9pbl9kYXlzIjoxODB9XX0sIndpbmRvd3NfZXZlbnRzIjp7ImNvbGxlY3RfbGlzdCI6W3siZXZlbnRfbmFtZSI6IlN5c3RlbSIsImV2ZW50X2xldmVscyI6WyJJTkZPUk1BVElPTiIsIkVSUk9SIl0sImxvZ19ncm91cF9uYW1lIjoiU3lzdGVtRXZlbnRzIiwibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzLXtpbnN0YW5jZV9pZH0te2hvc3RuYW1lfS1TeXN0ZW1FdmVudHMiLCJldmVudF9mb3JtYXQiOiJ4bWwifSx7ImV2ZW50X25hbWUiOiJTZWN1cml0eSIsImV2ZW50X2xldmVscyI6WyJJTkZPUk1BVElPTiIsIkVSUk9SIl0sImxvZ19ncm91cF9uYW1lIjoiU2VjdXJpdHlFdmVudHMiLCJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3Mte2luc3RhbmNlX2lkfS17aG9zdG5hbWV9LVNlY3VyaXR5RXZlbnRzIiwiZXZlbnRfZm9ybWF0IjoieG1sIn0seyJldmVudF9uYW1lIjoiQXBwbGljYXRpb24iLCJldmVudF9sZXZlbHMiOlsiSU5GT1JNQVRJT04iLCJFUlJPUiJdLCJsb2dfZ3JvdXBfbmFtZSI6IkFwcGxpY2F0aW9uRXZlbnRzIiwibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzLXtpbnN0YW5jZV9pZH0te2hvc3RuYW1lfS1BcHBsaWNhdGlvbkV2ZW50cyIsImV2ZW50X2Zvcm1hdCI6InhtbCJ9XX19fX0="
mainSteps:
- action: aws:runShellScript
  name: Update_Cloudwatch_Config_Linux
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    runCommand:
    - "[ ! -f \"/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\" ] && echo \"Cloudwatch not installed\" && exit 1"
    - reset_config={{ resetConfig }}
    - "[ \"${reset_config}\" != \"true\" ] && reset_config=\"false\""
    - config_name=$(echo "{{ configName }}.json" | tr '[:upper:]' '[:lower:]')
    - cloudwatch_file_count=$(ls /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/ | grep -ic \"\\.*\")
    - "[ -f \"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/file_amazon-cloudwatch-agent.json\"  ] && cloudwatch_file_count=$(($cloudwatch_file_count-1))"
    - "[ $cloudwatch_file_count -lt 1  ] && reset_config=\"true\""
    - "[ $cloudwatch_file_count -eq 1  ] && [ $(ls /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/ | grep -ic \"file_${config_name}\") -eq 1  ] && reset_config=\"true\""
    - tmp_dir=$(mktemp -d -t cloudwatch_config-XXXXXXXXXX)
    - config_file_path="${tmp_dir}/${config_name}"
    - echo "{{ LinuxCloudWatchConfigBase64 }}" | base64 --decode > $config_file_path
    - cloudwatch_config_filepath="/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/file_${config_name}"
    - "[ -f \"${cloudwatch_config_filepath}\" ] && [ \"$(cat $cloudwatch_config_filepath | base64 -w 0 )\" == \"$(cat $config_file_path | base64 -w 0  )\" ] && rm -Rf \"${tmp_dir}\" && echo \"Config Matches\" && exit 0"
    - "[ \"${reset_config}\" == \"true\"  ] && sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c \"file:${config_file_path}\""
    - "[ \"${reset_config}\" != \"true\"  ] && sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c \"file:${config_file_path}\""
    - rm -Rf "${tmp_dir}"
    - echo "Configured"
- action: aws:runPowerShellScript
  name: Update_Cloudwatch_Config_Windows
  precondition:
    StringEquals:
    - platformType
    - Windows
  inputs:    
    runCommand:
    - if ( -not $(Test-Path -Path "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1") ) { throw "Cloudwatch not installed"; exit 1 }
    - $reset_config = $([System.Convert]::ToBoolean("{{ resetConfig }}"))
    - $config_name = $("{{ configName }}.json".ToLower())
    - $cloudwatch_config_path = "$($Env:ProgramData)\Amazon\AmazonCloudWatchAgent\Configs"
    - $cloudwatch_config_filepath = "$($cloudwatch_config_path)\file_$($config_name)"
    - $cloudwatch_file_count = $(Get-ChildItem  -Path "$($cloudwatch_config_path)\*" | Measure-Object).Count
    - if( Test-Path -Path "$($cloudwatch_config_path)\file_amazon-cloudwatch-agent.json" ){  $cloudwatch_file_count =  $cloudwatch_file_count - 1}
    - if ( $cloudwatch_file_count -lt 1  ){ $reset_config = $TRUE }
    - if ( $cloudwatch_file_count -eq 1 -and $(Test-Path -Path $cloudwatch_config_filepath)   ){ $reset_config = $TRUE }
    - $tmp_dir = Join-Path -Path "$([System.IO.Path]::GetTempPath())" -ChildPath "cloudwatch_$([System.IO.Path]::GetRandomFileName())"
    - $config_file_path = $(Join-Path -Path $tmp_dir -ChildPath $config_name)
    - New-Item -Path $tmp_dir -ItemType "directory" -ErrorAction SilentlyContinue
    - $([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("{{ WinuxCloudWatchConfigBase64 }}"))) | Out-File -Encoding Ascii -FilePath $config_file_path
    - if ( Test-Path -Path "$Env:ProgramData\Amazon\AmazonCloudWatchAgent\Configs\file_$($config_name)" ) { if ( $(Get-FileHash $config_file_path -Algorithm "SHA256").Hash -eq (Get-FileHash $cloudwatch_config_filepath -Algorithm "SHA256").Hash  ){ Remove-Item -Recurse -Path "$tmp_dir\*"; Remove-Item -Recurse -Path "$tmp_dir"; write-host "Config Matches"; exit 0   } }
    - if ($reset_config) { & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c "file:$($config_file_path)"  }
    - if (-not $reset_config) { & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a append-config -m ec2 -s -c "file:$($config_file_path)"  }
    - Remove-Item -Recurse -Path "$tmp_dir\*"
    - Remove-Item -Recurse -Path "$tmp_dir"
    - write-host "Configured"
---
schemaVersion: "2.2"
description: Configure Cloudwatch Agent Config
parameters:
  resetConfig:
    type: "String"
    description: "If true this will delete all other configs. If not true (case sensitive), than it is false"
    default: "false"
  configName:
    type: "String"
    description: "The name of the config to use."
    default: "secondary"
  LinuxCloudWatchConfigBase64:
    type: "String"
    description: "Linux CloudWatch Config converted to base64"
    default: "eyJhZ2VudCI6eyJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJvbWl0X2hvc3RuYW1lIjpmYWxzZSwiYXdzX3Nka19sb2dfbGV2ZWwiOiJMb2dEZWJ1ZyIsImxvZ2ZpbGUiOiIvb3B0L2F3cy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC9sb2dzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50LmxvZyIsInJ1bl9hc191c2VyIjoicm9vdCJ9LCJtZXRyaWNzIjp7Im5hbWVzcGFjZSI6IkNXRGV0YWlsZWRNZXRyaWNzIiwiYXBwZW5kX2RpbWVuc2lvbnMiOnsiQXV0b1NjYWxpbmdHcm91cE5hbWUiOiIke2F3czpBdXRvU2NhbGluZ0dyb3VwTmFtZX0iLCJJbWFnZUlkIjoiJHthd3M6SW1hZ2VJZH0iLCJJbnN0YW5jZUlkIjoiJHthd3M6SW5zdGFuY2VJZH0iLCJJbnN0YW5jZVR5cGUiOiIke2F3czpJbnN0YW5jZVR5cGV9In0sImFnZ3JlZ2F0aW9uX2RpbWVuc2lvbnMiOltbIkluc3RhbmNlSWQiXSxbIkluc3RhbmNlVHlwZSJdLFsiSW5zdGFuY2VJZCIsIkluc3RhbmNlVHlwZSJdLFsiQXV0b1NjYWxpbmdHcm91cE5hbWUiLCJJbWFnZUlkIiwiSW5zdGFuY2VJZCJdLFsiQXV0b1NjYWxpbmdHcm91cE5hbWUiXSxbXV0sImZvcmNlX2ZsdXNoX2ludGVydmFsIjo5MCwibWV0cmljc19jb2xsZWN0ZWQiOnsiY3B1Ijp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbImNwdV91c2FnZV9pZGxlIiwiY3B1X3VzYWdlX2lvd2FpdCIsImNwdV91c2FnZV91c2VyIiwiY3B1X3VzYWdlX3N5c3RlbSJdLCJ0b3RhbGNwdSI6dHJ1ZX0sImRpc2siOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlt7Im5hbWUiOiJkaXNrX2ZyZWUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoiZGlza190b3RhbCIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJkaXNrX3VzZWQiLCJ1bml0IjoiR2lnYWJ5dGVzIn0sImRpc2tfdXNlZF9wZXJjZW50IiwiZGlza19pbm9kZXNfZnJlZSIsImRpc2tfaW5vZGVzX3RvdGFsIl19LCJkaXNraW8iOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlsiZGlza2lvX2lvcHNfaW5fcHJvZ3Jlc3MiLCJkaXNraW9faW9fdGltZSIsImRpc2tpb193cml0ZV9ieXRlcyIsImRpc2tpb19yZWFkX2J5dGVzIiwiZGlza2lvX3dyaXRlcyIsImRpc2tpb19yZWFkcyJdfSwic3dhcCI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6W3sibmFtZSI6InN3YXBfdXNlZCIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJzd2FwX2ZyZWUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0sInN3YXBfdXNlZF9wZXJjZW50Il19LCJtZW0iOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlt7Im5hbWUiOiJtZW1fYWN0aXZlIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6Im1lbV9hdmFpbGFibGUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX2J1ZmZlcmVkIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6Im1lbV9jYWNoZWQiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX2ZyZWUiLCJ1bml0IjoiR2lnYWJ5dGVzIn0seyJuYW1lIjoibWVtX3RvdGFsIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6Im1lbV91c2VkIiwidW5pdCI6IkdpZ2FieXRlcyJ9LCJtZW1fYXZhaWxhYmxlX3BlcmNlbnQiLCJtZW1fdXNlZF9wZXJjZW50Il19LCJuZXQiOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlsibmV0X2J5dGVzX3NlbnQiLCJuZXRfYnl0ZXNfcmVjdiIsIm5ldF9kcm9wX2luIiwibmV0X2Ryb3Bfb3V0IiwibmV0X2Vycl9pbiIsIm5ldF9lcnJfb3V0IiwibmV0X3BhY2tldHNfc2VudCIsIm5ldF9wYWNrZXRzX3JlY3YiXX0sIm5ldHN0YXQiOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlsibmV0c3RhdF90Y3BfZXN0YWJsaXNoZWQiLCJuZXRzdGF0X3RjcF90aW1lX3dhaXQiLCJuZXRzdGF0X3RjcF9zeW5fc2VudCIsIm5ldHN0YXRfdGNwX2Nsb3NlIiwibmV0c3RhdF90Y3BfY2xvc2Vfd2FpdCIsIm5ldHN0YXRfdGNwX2Nsb3NpbmciXX0sInByb2Nlc3NlcyI6eyJyZXNvdXJjZXMiOlsiKiJdLCJtZWFzdXJlbWVudCI6WyJwcm9jZXNzZXNfcnVubmluZyIsInByb2Nlc3Nlc19zbGVlcGluZyIsInByb2Nlc3Nlc19kZWFkIiwicHJvY2Vzc2VzX2lkbGUiLCJwcm9jZXNzZXNfdG90YWwiLCJwcm9jZXNzZXNfdG90YWxfdGhyZWFkcyIsInByb2Nlc3Nlc196b21iaWVzIl19fX0sImxvZ3MiOnsibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzIiwiZm9yY2VfZmx1c2hfaW50ZXJ2YWwiOjkwLCJsb2dzX2NvbGxlY3RlZCI6eyJmaWxlcyI6eyJjb2xsZWN0X2xpc3QiOlt7ImZpbGVfcGF0aCI6Ii9vcHQvYXdzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50L2xvZ3MvYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQubG9nIiwibG9nX2dyb3VwX25hbWUiOiJhbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5sb2ciLCJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3Mte2luc3RhbmNlX2lkfS17aG9zdG5hbWV9LWN3YWdlbnQiLCJ0aW1lem9uZSI6IlVUQyIsInRpbWVzdGFtcF9mb3JtYXQiOiIlWS0lbS0lZFQlSDolTTolUy4lZiV6IiwiYXV0b19yZW1vdmFsIjp0cnVlLCJyZXRlbnRpb25faW5fZGF5cyI6MTgwfSx7ImZpbGVfcGF0aCI6Ii92YXIvbG9nL3N5c3RlbS5sb2cqIiwibG9nX2dyb3VwX25hbWUiOiJzeXN0ZW0ubG9nIiwibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzLXtpbnN0YW5jZV9pZH0te2hvc3RuYW1lfS1zeXN0ZW0iLCJ0aW1lem9uZSI6IlVUQyIsInRpbWVzdGFtcF9mb3JtYXQiOiIlWS0lbS0lZFQlSDolTTolUy4lZiV6IiwiYXV0b19yZW1vdmFsIjp0cnVlLCJyZXRlbnRpb25faW5fZGF5cyI6MTgwfV19fX19"
  WinuxCloudWatchConfigBase64:
    type: "String"
    description: "Windows CloudWatch Config converted to base64"
    default: "eyJhZ2VudCI6eyJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJvbWl0X2hvc3RuYW1lIjpmYWxzZSwiYXdzX3Nka19sb2dfbGV2ZWwiOiJMb2dEZWJ1ZyIsImxvZ2ZpbGUiOiJjOlxcUHJvZ3JhbURhdGFcXEFtYXpvblxcQW1hem9uQ2xvdWRXYXRjaEFnZW50XFxMb2dzXFxhbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5sb2cifSwibWV0cmljcyI6eyJuYW1lc3BhY2UiOiJDV0RldGFpbGVkTWV0cmljcyIsImFwcGVuZF9kaW1lbnNpb25zIjp7IkF1dG9TY2FsaW5nR3JvdXBOYW1lIjoiJHthd3M6QXV0b1NjYWxpbmdHcm91cE5hbWV9IiwiSW1hZ2VJZCI6IiR7YXdzOkltYWdlSWR9IiwiSW5zdGFuY2VJZCI6IiR7YXdzOkluc3RhbmNlSWR9IiwiSW5zdGFuY2VUeXBlIjoiJHthd3M6SW5zdGFuY2VUeXBlfSJ9LCJhZ2dyZWdhdGlvbl9kaW1lbnNpb25zIjpbWyJJbnN0YW5jZUlkIl0sWyJJbnN0YW5jZVR5cGUiXSxbIkluc3RhbmNlSWQiLCJJbnN0YW5jZVR5cGUiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIiwiSW1hZ2VJZCIsIkluc3RhbmNlSWQiXSxbIkF1dG9TY2FsaW5nR3JvdXBOYW1lIl1dLCJmb3JjZV9mbHVzaF9pbnRlcnZhbCI6OTAsIm1ldHJpY3NfY29sbGVjdGVkIjp7IkxvZ2ljYWxEaXNrIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoiJSBGcmVlIFNwYWNlIiwicmVuYW1lIjoiZGlza19mcmVlX3BlcmNlbnQiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgVXNlZCBTcGFjZSIsInJlbmFtZSI6ImRpc2tfdXNlZF9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiJGcmVlIE1lZ2FieXRlcyIsInJlbmFtZSI6ImRpc2tfZnJlZSIsInVuaXQiOiJNZWdhYnl0ZXMifSx7Im5hbWUiOiIlIElkbGUgVGltZSIsInJlbmFtZSI6ImRpc2tfdXNhZ2VfaWRsZSIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiJSBEaXNrIFJlYWQgVGltZSIsInJlbmFtZSI6ImRpc2tfdXNhZ2VfcmVhZCIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiJSBEaXNrIFdyaXRlIFRpbWUiLCJyZW5hbWUiOiJkaXNrX3VzYWdlX3dyaXRlIiwidW5pdCI6IlBlcmNlbnQifV19LCJNZW1vcnkiOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlt7Im5hbWUiOiIlIEF2YWlsYWJsZSBTd2FwIFNwYWNlIiwicmVuYW1lIjoic3dhcF9mcmVlX3BlcmNlbnQiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgVXNlZCBTd2FwIFNwYWNlIiwicmVuYW1lIjoic3dhcF91c2VkX3BlcmNlbnQiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IkF2YWlsYWJsZSBNQnl0ZXMgU3dhcCIsInJlbmFtZSI6InN3YXBfZnJlZSIsInVuaXQiOiJNZWdhYnl0ZXMifSx7Im5hbWUiOiIlIEF2YWlsYWJsZSBNZW1vcnkiLCJyZW5hbWUiOiJtZW1fYXZhaWxhYmxlX3BlcmNlbnQiLCJ1bml0IjoiUGVyY2VudCJ9LHsibmFtZSI6IiUgVXNlZCBNZW1vcnkiLCJyZW5hbWUiOiJtZW1fdXNlZF9wZXJjZW50IiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiJBdmFpbGFibGUgTUJ5dGVzIE1lbW9yeSIsInJlbmFtZSI6Im1lbV9hdmFpbGFibGUiLCJ1bml0IjoiTWVnYWJ5dGVzIn0seyJuYW1lIjoiUGFnZXMvc2VjIiwicmVuYW1lIjoicGFnZXNfc2Vjb25kIn1dfSwiTmV0d29yayBJbnRlcmZhY2UiOnsicmVzb3VyY2VzIjpbIioiXSwibWVhc3VyZW1lbnQiOlt7Im5hbWUiOiJUb3RhbCBCeXRlcyBUcmFuc21pdHRlZCIsInJlbmFtZSI6Im5ldF9ieXRlc19zZW50IiwidW5pdCI6IkJ5dGVzIn0seyJuYW1lIjoiVG90YWwgQnl0ZXMgUmVjZWl2ZWQiLCJyZW5hbWUiOiJuZXRfYnl0ZXNfcmVjdiIsInVuaXQiOiJCeXRlcyJ9LHsibmFtZSI6IlRvdGFsIFJ4IEVycm9ycyIsInJlbmFtZSI6Im5ldF9lcnJfaW4ifSx7Im5hbWUiOiJUb3RhbCBUeCBFcnJvcnMiLCJyZW5hbWUiOiJuZXRfZXJyX291dCJ9LHsibmFtZSI6IlRvdGFsIFBhY2tldHMgVHJhbnNtaXR0ZWQiLCJyZW5hbWUiOiJuZXRfcGFja2V0c19zZW50In0seyJuYW1lIjoiVG90YWwgUGFja2V0cyBSZWNlaXZlZCIsInJlbmFtZSI6Im5ldF9wYWNrZXRzX3JlY3YifV19LCJQYWdpbmcgRmlsZSI6eyJtZWFzdXJlbWVudCI6WyIlIFVzYWdlIl0sIm1ldHJpY3NfY29sbGVjdGlvbl9pbnRlcnZhbCI6NjAsInJlc291cmNlcyI6WyIqIl19LCJQaHlzaWNhbERpc2siOnsibWVhc3VyZW1lbnQiOlsiJSBEaXNrIFRpbWUiLCJEaXNrIFdyaXRlIEJ5dGVzL3NlYyIsIkRpc2sgUmVhZCBCeXRlcy9zZWMiLCJEaXNrIFdyaXRlcy9zZWMiLCJEaXNrIFJlYWRzL3NlYyJdLCJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjYwLCJyZXNvdXJjZXMiOlsiKiJdfSwiUHJvY2Vzc29yIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoiJSBJZGxlIFRpbWUiLCJyZW5hbWUiOiJjcHVfdXNhZ2VfaWRsZSIsInVuaXQiOiJQZXJjZW50In0seyJuYW1lIjoiJSBJbnRlcnJ1cHQgVGltZSIsInJlbmFtZSI6ImNwdV91c2FnZV9pZGxlIiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiIlIFVzZXIgVGltZSIsInJlbmFtZSI6ImNwdV91c2FnZV91c2VyIiwidW5pdCI6IlBlcmNlbnQifSx7Im5hbWUiOiIlIFByb2Nlc3NvciBUaW1lIiwicmVuYW1lIjoiY3B1X3VzYWdlX3N5c3RlbSIsInVuaXQiOiJQZXJjZW50In1dfSwiU3lzdGVtIjp7InJlc291cmNlcyI6WyIqIl0sIm1lYXN1cmVtZW50IjpbeyJuYW1lIjoiRnJlZSBQaHlzaWNhbCBNZW1vcnkiLCJyZW5hbWUiOiJtZW1fYXZhaWxhYmxlIiwidW5pdCI6IkdpZ2FieXRlcyJ9LHsibmFtZSI6IkZyZWUgVmlydHVhbCBNZW1vcnkiLCJyZW5hbWUiOiJ2bWVtX2F2YWlsYWJsZSIsInVuaXQiOiJHaWdhYnl0ZXMifSx7Im5hbWUiOiJQcm9jZXNzZXMiLCJyZW5hbWUiOiJzeXN0ZW1fcHJvY2Vzc2VzIn0seyJuYW1lIjoiVXB0aW1lIiwicmVuYW1lIjoic3lzdGVtX3VwdGltZSJ9XX0sIlRDUHY0Ijp7Im1lYXN1cmVtZW50IjpbIkNvbm5lY3Rpb25zIEVzdGFibGlzaGVkIl0sIm1ldHJpY3NfY29sbGVjdGlvbl9pbnRlcnZhbCI6NDV9LCJUQ1B2NiI6eyJtZWFzdXJlbWVudCI6WyJDb25uZWN0aW9ucyBFc3RhYmxpc2hlZCJdLCJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjQ1fSwic3RhdHNkIjp7Im1ldHJpY3NfYWdncmVnYXRpb25faW50ZXJ2YWwiOjQ1LCJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOjEwLCJzZXJ2aWNlX2FkZHJlc3MiOiI6ODEyNSJ9fX0sImxvZ3MiOnsibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzIiwiZm9yY2VfZmx1c2hfaW50ZXJ2YWwiOjkwLCJsb2dzX2NvbGxlY3RlZCI6eyJmaWxlcyI6eyJjb2xsZWN0X2xpc3QiOlt7ImZpbGVfcGF0aCI6ImM6XFxQcm9ncmFtRGF0YVxcQW1hem9uXFxBbWF6b25DbG91ZFdhdGNoQWdlbnRcXExvZ3NcXGFtYXpvbi1jbG91ZHdhdGNoLWFnZW50LmxvZyIsImxvZ19ncm91cF9uYW1lIjoiYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQubG9nIiwibG9nX3N0cmVhbV9uYW1lIjoibG9nLUNXRGV0YWlsZWRNZXRyaWNzLXtpbnN0YW5jZV9pZH0te2hvc3RuYW1lfS1jd2FnZW50IiwidGltZXpvbmUiOiJVVEMiLCJ0aW1lc3RhbXBfZm9ybWF0IjoiJVktJW0tJWRUJUg6JU06JVMuJWYleiIsImF1dG9fcmVtb3ZhbCI6dHJ1ZSwicmV0ZW50aW9uX2luX2RheXMiOjE4MH1dfSwid2luZG93c19ldmVudHMiOnsiY29sbGVjdF9saXN0IjpbeyJldmVudF9uYW1lIjoiU3lzdGVtIiwiZXZlbnRfbGV2ZWxzIjpbIklORk9STUFUSU9OIiwiRVJST1IiXSwibG9nX2dyb3VwX25hbWUiOiJTeXN0ZW1FdmVudHMiLCJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3Mte2luc3RhbmNlX2lkfS17aG9zdG5hbWV9LVN5c3RlbUV2ZW50cyIsImV2ZW50X2Zvcm1hdCI6InhtbCJ9LHsiZXZlbnRfbmFtZSI6IlNlY3VyaXR5IiwiZXZlbnRfbGV2ZWxzIjpbIklORk9STUFUSU9OIiwiRVJST1IiXSwibG9nX2dyb3VwX25hbWUiOiJTZWN1cml0eUV2ZW50cyIsImxvZ19zdHJlYW1fbmFtZSI6ImxvZy1DV0RldGFpbGVkTWV0cmljcy17aW5zdGFuY2VfaWR9LXtob3N0bmFtZX0tU2VjdXJpdHlFdmVudHMiLCJldmVudF9mb3JtYXQiOiJ4bWwifSx7ImV2ZW50X25hbWUiOiJBcHBsaWNhdGlvbiIsImV2ZW50X2xldmVscyI6WyJJTkZPUk1BVElPTiIsIkVSUk9SIl0sImxvZ19ncm91cF9uYW1lIjoiQXBwbGljYXRpb25FdmVudHMiLCJsb2dfc3RyZWFtX25hbWUiOiJsb2ctQ1dEZXRhaWxlZE1ldHJpY3Mte2luc3RhbmNlX2lkfS17aG9zdG5hbWV9LUFwcGxpY2F0aW9uRXZlbnRzIiwiZXZlbnRfZm9ybWF0IjoieG1sIn1dfX19fQ=="
mainSteps:
- action: aws:runShellScript
  name: Update_Cloudwatch_Config_Linux
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    runCommand:
    - "[ ! -f \"/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\" ] && echo \"Cloudwatch not installed\" && exit 1"
    - reset_config={{ resetConfig }}
    - "[ \"${reset_config}\" != \"true\" ] && reset_config=\"false\""
    - config_name=$(echo "{{ configName }}.json" | tr '[:upper:]' '[:lower:]')
    - "[ $(ls /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/ | grep -ic \"\\.*\") -lt 1  ] && reset_config=\"true\""
    - tmp_dir=$(mktemp -d -t cloudwatch_config-XXXXXXXXXX)
    - config_file_path="${tmp_dir}/${config_name}"
    - echo "{{ LinuxCloudWatchConfigBase64 }}" | base64 --decode > $config_file_path
    - cloudwatch_config_filepath="/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/file_${config_name}"
    - "[ -f \"${cloudwatch_config_filepath}\" ] && [ \"$(cat $cloudwatch_config_filepath | base64 -w 0 )\" == \"$(cat $config_file_path | base64 -w 0  )\" ] && rm -Rf \"${tmp_dir}\" && echo \"Config Matches\" && exit 0"
    - "[ \"${reset_config}\" == \"true\"  ] && sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c \"file:${config_file_path}\""
    - "[ \"${reset_config}\" != \"true\"  ] && sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c \"file:${config_file_path}\""
    - rm -Rf "${tmp_dir}"
    - echo "Configured"
- action: aws:runPowerShellScript
  name: Update_Cloudwatch_Config_Windows
  precondition:
    StringEquals:
    - platformType
    - Windows
  inputs:    
    runCommand:
    - if ( -not Test-Path -Path "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" ) { throw "Cloudwatch not installed"; exit 1 }
    - $reset_config = $([System.Convert]::ToBoolean("{{ resetConfig }}"))
    - $config_name = $("{{ configName }}.json".ToLower())
    - if ( $(Get-ChildItem  $Env:ProgramData\Amazon\AmazonCloudWatchAgent\Configs\* | Measure-Object).Count -lt 1  ){ $reset_config = $TRUE }
    - $tmp_dir = Join-Path -Path "$([System.IO.Path]::GetTempPath())" -ChildPath "cloudwatch_$([System.IO.Path]::GetRandomFileName())"
    - $config_file_path = $(Join-Path -Path $tmp_dir -ChildPath $config_name)
    - New-Item -Path $tmp_dir -ItemType "directory" -ErrorAction SilentlyContinue
    - $([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("{{ WinuxCloudWatchConfigBase64 }}"))) | Out-File -FilePath $config_file_path
    - $cloudwatch_config_filepath = "$Env:ProgramData\Amazon\AmazonCloudWatchAgent\Configs\file_$($config_name)"
    - if ( Test-Path -Path "$Env:ProgramData\Amazon\AmazonCloudWatchAgent\Configs\file_$($config_name)" ) { if ( $(Get-FileHash $config_file_path -Algorithm "SHA256").Hash -eq (Get-FileHash $cloudwatch_config_filepath -Algorithm "SHA256").Hash  ){ Remove-Item -Recurse -Path "$tmp_dir\*"; Remove-Item -Recurse -Path "$tmp_dir"; write-host "Config Matches"; exit 0   } }
    - if ($reset_config) { & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c "file:$($config_file_path)"  }
    - if (-not $reset_config) { & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a append-config -m ec2 -s -c "file:$($config_file_path)"  }
    - Remove-Item -Recurse -Path "$tmp_dir\*"
    - Remove-Item -Recurse -Path "$tmp_dir"
    - write-host "Configured"